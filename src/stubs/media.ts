// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.21.12
// source: media.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "media";

export interface GetMediaRequest {
  fileKey: string;
}

export interface GetMediaResponse {
  fileUrl: string;
}

export interface GetSignedUploadUrlsRequest {
  files: string[];
}

export interface GetSignedUploadUrlsResponse {
  urls: SignedUrl[];
}

export interface SignedUrl {
  fileKey: string;
  uploadUrl: string;
  publicUrl: string;
}

export interface DeleteMediaRequest {
  files: string[];
}

export interface DeleteMediaResponse {
  success: boolean;
  deletedFiles: string[];
  failedFiles: string[];
}

export const MEDIA_PACKAGE_NAME = "media";

export interface MediaServiceClient {
  getSignedUploadUrls(
    request: GetSignedUploadUrlsRequest,
    metadata?: Metadata,
  ): Observable<GetSignedUploadUrlsResponse>;

  deleteMedia(request: DeleteMediaRequest, metadata?: Metadata): Observable<DeleteMediaResponse>;

  getMedia(request: GetMediaRequest, metadata?: Metadata): Observable<GetMediaResponse>;
}

export interface MediaServiceController {
  getSignedUploadUrls(
    request: GetSignedUploadUrlsRequest,
    metadata?: Metadata,
  ): Promise<GetSignedUploadUrlsResponse> | Observable<GetSignedUploadUrlsResponse> | GetSignedUploadUrlsResponse;

  deleteMedia(
    request: DeleteMediaRequest,
    metadata?: Metadata,
  ): Promise<DeleteMediaResponse> | Observable<DeleteMediaResponse> | DeleteMediaResponse;

  getMedia(
    request: GetMediaRequest,
    metadata?: Metadata,
  ): Promise<GetMediaResponse> | Observable<GetMediaResponse> | GetMediaResponse;
}

export function MediaServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getSignedUploadUrls", "deleteMedia", "getMedia"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("MediaService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("MediaService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const MEDIA_SERVICE_NAME = "MediaService";
